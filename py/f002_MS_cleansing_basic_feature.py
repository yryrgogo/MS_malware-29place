prefix = 'f007_less1k'
is_save = 1
is_base = 1
import time
import numpy as np
import pandas as pd
import glob
import sys
import os
HOME = os.path.expanduser('~')
sys.path.append(f"{HOME}/kaggle/data_analysis/library/")
import kaggle_utils
import ml_utils
import utils
import MS_utils


# Columns
key, target, ignore_list = MS_utils.get_basic_var()

# Train Test Load
# train, test = MS_utils.get_dataset(feat_path='../features/2_second_valid/*.gz')
train, test = MS_utils.get_dataset()

"""
Numetricは無視する
"""
num_list = [
    'f000_Census_TotalPhysicalRAM'
    'f000_Census_InternalPrimaryDiagonalDisplaySizeInInches'
    'f000_Census_InternalBatteryNumberOfCharges'
    'f000_Census_InternalBatteryType'
    'f000_Census_InternalPrimaryDisplayResolutionVertical'
    'f000_Census_PrimaryDiskTotalCapacity'
    'f000_Census_InternalPrimaryDisplayResolutionHorizontal'
    'f000_Census_SystemVolumeTotalCapacity'
]

"""
CategoricalはXサンプル未満をReplaceする
"""
en_col = 'f000_EngineVersion'
os_col = 'f000_Census_OSVersion'
vi_col = 'f000_AvSigVersion'
app_col = 'f000_AppVersion'


do_cols = [col for col in train.columns if col not in ignore_list]
min_thres = 1000
no_test_idx_list = []

for col in do_cols:

    train_col = f"train_{col}"
    test_col = f"test_{col}"
    df = kaggle_utils.get_train_test_comp(train, test, col, target=target)
    no_train_list = df[df[train_col] == 0].iloc[:, 0].unique().tolist()
    no_test_list = df[df[test_col] == 0].iloc[:, 0].unique().tolist()
    less_than = df[df[train_col] <= min_thres][df[train_col] > 0].iloc[:, 0].unique().tolist()

    #  df["ratio_train_test"] = df[train_col] / df[test_col]
    #  df["ratio_test_train"] = df[test_col] / df[train_col]

    """
    エンコードに注力すべきカテゴリ
    (df["ratio_train_test"]<0.2)
    """


    """
    Testに存在しないカテゴリを持ったTrain Dataは取り除く
    """
    no_test_idx = train.loc[train[col].isin(no_test_list), key].unique().tolist()
    no_test_idx_list += no_test_idx

    major_val = df.iloc[0, 0]
    if major_val in no_train_list:
        major_val = df.iloc[1, 0]
    if major_val in no_train_list:
        major_val = df.iloc[2, 0]
    if major_val in no_train_list:
        major_val = df.iloc[3, 0]

    """
    #========================================================================
    # Engine
    #========================================================================
    """

    if col == en_col:

        # Trainのメジャーバージョンにしておく
        train.loc[train[col].isin(no_train_list), col] = 67
        test.loc[test[col].isin(no_train_list), col] = 67

        # マイナーなカテゴリはマイナーとわかるようにしておく
        train.loc[train[col].isin(less_than), col] = -1
        test.loc[test[col].isin(less_than), col] = -1

        train.loc[train[col] == 69, col] = 67
        test.loc[test[col] == 69, col] = 67

    elif col == os_col:
        """
        #========================================================================
        # OSverion
        480~: 360へ置換。targetが低めのにしてみる（0.45）
        #========================================================================
        """

        major_val = 360

        # Trainのメジャーバージョンにしておく
        train.loc[train[col].isin(no_train_list), col] = major_val
        test.loc[test[col].isin(no_train_list), col] = major_val

        # マイナーなカテゴリはマイナーとわかるようにしておく
        train.loc[train[col].isin(less_than), col] = -1
        test.loc[test[col].isin(less_than), col] = -1

    elif col == vi_col:
        """
        #========================================================================
        # AvSigVersion
        # Engineによってtargetの分布が異なる気がする。今は未知のEngineを67にしてるので、67に合わせる
        8300以降は最新verなのでサンプルがない.一旦8574にしてみる(100k sample, target: 0.498)
        #========================================================================
        """

        major_val = 8574

        # Trainのメジャーバージョンにしておく
        train.loc[train[col].isin(no_train_list), col] = major_val
        test.loc[test[col].isin(no_train_list), col] = major_val

        # マイナーなカテゴリはマイナーとわかるようにしておく
        train.loc[train[col].isin(less_than), col] = -1
        test.loc[test[col].isin(less_than), col] = -1

    elif col == app_col:
        """
        #========================================================================
        # AppVersion
        Testでは66が2730000, 72が2120000いる。
        66はTrainに13000しかおらず、十分な学習は難しい
        72はTrainにない。
        Trainには64が513万ともっとも多いが、66, 72が64と近いかわからない
        64にreplaceしたversionと、Trainで予測して置換したものをアンサンブルのが良さそう
        35はTestにしかない。20~40あたりで置換する
        #========================================================================
        """

        if 35 in no_train_list:
            no_train_list.remove(35)
        if 35 in less_than:
            less_than.remove(35)

        # Trainのメジャーバージョンにしておく
        train.loc[train[col].isin(no_train_list), col] = major_val
        test.loc[test[col].isin(no_train_list), col] = major_val

        train.loc[train[col] == 35, col] = 22
        test.loc[test[col] == 35, col] = 22

        # マイナーなカテゴリはマイナーとわかるようにしておく
        train.loc[train[col].isin(less_than), col] = -1
        test.loc[test[col].isin(less_than), col] = -1

    elif col == 'f000_RtpStateBitfield':
        train.loc[train[col] > 30, col] = 8
        test.loc[test[col] > 30, col] = 8
        train.loc[train[col] < 5, col] = 0
        test.loc[test[col] < 5, col] = 0

    elif col == 'f000_Census_OSBuildNumber':
        train.loc[train[col] == 17763, col] = major_val
        test.loc[test[col] == 17763, col] = major_val

    else:
        # Trainのメジャーバージョンにしておく
        train.loc[train[col].isin(no_train_list), col] = major_val
        test.loc[test[col].isin(no_train_list), col] = major_val

        # マイナーなカテゴリはマイナーとわかるようにしておく
        train.loc[train[col].isin(less_than), col] = -1
        test.loc[test[col].isin(less_than), col] = -1


    print(f"{col} Complete!")


if is_save:
    no_test_idx_list = list(set(no_test_idx_list))
    print(f"All Train shape: {train.shape}")
    train = train.loc[~train[key].isin(no_test_idx_list), :]
    print(f"Exclude No Test Category Train shape: {train.shape}")
    df_feat = pd.concat([train, test], axis=0, ignore_index=True)

    if is_base:
        base = df_feat[[key, target, 'country_group']]
        utils.to_df_pkl(df=base, path='../input', fname='base_exclude_no_test')

    feat_cols = [col for col in train.columns if col not in ignore_list and not(
        col.count('country_'))]
    df_feat = df_feat[feat_cols]
    feat_cols = [col.replace('f000_', '') for col in df_feat.columns]
    df_feat.columns = feat_cols

    MS_utils.save_feature(df_feat=df_feat, prefix=prefix)
    print(f"Feature Save Complete!!")
